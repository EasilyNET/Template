第一次使用请看:

	1. 如果您不精通 Github CI 集成编程，请勿删除 test/workflow 下的任何工程。
	2. 请在工程根目录下使用脚本对各管道进行初始化. 例如: scanner.bat 或 linux 下 scanner.sh



项目结构:

	samples : 案例工程文件夹
	src: 类库源码文件夹
	test/benchmark : 性能测试文件夹
	test/ut : 单元测试文件夹
	solution items: 全局配置文件夹, 主要存放配置文件.

	当创建完工程时需要手动更改项目名称.


Directory.Build.props 文件:

作用范围: src 文件夹下的项目;

区域说明:

	1. 框架配置区:
		a. TargetFrameworks : 运行时/标准库兼容版本标签, 指明了 src 下项目所兼容的框架, 如果需要定制化,可移除该标签,并在 src 下的项目工程文件中自定义框架目标.
		b. Nullable : 可空引用标签, 该标签默认开启, 请养成严谨编程的好习惯.
		c. LangVersion : 语言版本标签,默认使用预览版.

	2. 打包信息区域:
		a. IsPackable 是否开启打包功能.
		b. IncludeSymbols 是否包含元数据符号等.
		c. GeneratePackageOnBuild 是否在项目生成时生成项目包.
		d. PackageRequireLicenseAcceptance 是否需要接入许可证.
		e. PackageProjectUrl 项目链接地址.
		f. Copyright 作者及合作者等版权说明.
		g. Company 该包所属团体
		h. Authors 作者昵称/姓名
		i. PackageIcon 上传到 NUGET 时,包所用的头像. 这里会从[资源区]链接过来.
		j. PackageLicenseFile 上传到 NUGET 时,包所包含的许可证文件, 这里会从[资源区]链接过来.

	3. 资源输出区:
		a. 第一行: {myImage} 需要替换成 resource 文件夹中你所存放的,打算给包上传的图片文件.
		b. 第一行: {nuget pack image} 需要替换成[打包信息区]中你所指定的要上传的 PackageIcon 节点值. 该字段类似于软连接了资源文件.
		c. 第二行: {myLicense} 参考 a.b 两点, 原理相同.



Project 工程文件:

配置说明:
	
	1. PackageId : nuget 包名称.
	2. PackageReleaseNotes : nuget 包发版信息.
	3. PackageTags : nuget 检索关键字.
	4. Description : nuget 项目描述信息.
	5. FileVersion : nuget 文件版本信息.
	6. AssemblyVersion : nuget 生成程序集的版本信息.
	7. Product: nuget 产品信息.


注意: 
	1. nuget 包的版本在 CHANGELOG.md 文件中指定,每次发版需要在 CHANGELOG.md 文件尾部追加发布信息,包括包名称,版本,更新细则,支持多包发布.
	2. 更详细的包说明(https://learn.microsoft.com/zh-cn/nuget/create-packages/package-authoring-best-practices)



管道配置说明:

	※ 为仓库配置访问 Token : 看文档配置私人Classic Token: https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token 
	所在文件位置:  除了 pr_test.yml 和 codecov.yml 以外的所有 workflow/ 下的 yml 文件中.
	拿到 Token 需要配置, 在你的仓库配置 Setting -> Secrets and variables -> Action 创建安全变量,并配置:
		KEY:REPO_GITHUB_TOKEN  
		VALUE: {{your_classic_token}} 

	搜索 "Push to Codecov" : 在 https://app.codecov.io/gh 网站完成注册, 在 codecov 中找到你的仓库, 从配置里拿取 Token.
	所在文件位置:  .github/workflows/codecov.yml
	拿到 Token 需要配置, 在你的仓库配置 Setting -> Secrets and variables -> Action 创建安全变量,并配置:
		KEY: COVERAGE_KEY 
		VALUE: {{your_codecov_token}}
 
	搜索 "Push to Nuget" : 并在 https://www.nuget.org/users/account/LogOn?returnUrl=%2F 网站登录, 拿到配置 TOKEN.
	所在文件位置: .github/workflows/release.yml
	拿到 Token 需要配置, 在你的仓库配置 Setting -> Secrets and variables -> Action 创建安全变量,并配置:
		KEY: NUGET_KEY 
		VALUE: {{your_nuget_token}}


管道配置说明:
	1. 使用脚本进行初始化; Windows 平台使用 scanner.bat; Linux 平台使用 scanner.sh;
		脚本运行将填补配置文件中缺失的项目
		脚本运行不会破坏现有配置
		根据当前配置更新各管道文件
		扫描后需要您更改 project.yml 完成其他模板配置
		完成 project.yml 提交到主分支生效

	2. ISSUE 提问模板配置:
		issues_template_label_configs:
		- template_file_name: feature
		  template_name: " \U0001F4A1 新的想法 (Feature request)"
		  title_prefix: '[Feature]:'
		  labels:
		  - name: enhancement
			description: New feature or request
			color: a2eeef


		模板文件名称(template_file_name:feature): 

			1. 说明在 .github/NMS_TEMPLATE/ 文件夹下存在以 feature.issue.template 为名的模板文件.
			2. 根据此项配置的值, scanner 会将配置落到 .github/ISSUE_TEMPLATE/feature.yml 中.


		模板展示名称(template_name: " \U0001F4A1 新的想法 (Feature request)"): 
			
			该配置项为点击创建 ISSUE 时展示模板的名称.


		模板标题前缀(title_prefix:'[Feature]:'): 
			
			此项配置的标题结果是: "[Feature]: 建议使用 YML 代替 JSON 增强配置可读性.".
			该配置项可以不填写值,其标题就是你所提问的原字符串: "建议使用 YML 代替 JSON 增强配置可读性.".


		模板自动标记(labels:xxxx): 

			当我们按照模板创建 ISSUE 后, 该 ISSUE 可以自动打标签,比如 BUG 问题会打上 bug 标签.
			支持多个标签,只需追加标签节点即可:
				
				- name: enhancement
				  description: New feature or request
				  color: a2eeef

			name: 标签名称
			color: 标签颜色
			description: 标签描述

			如果您的库中没有该标签, 则当您上传更新 project.yml 时,将自动创建这些标签.
			如果您的库中存在该标签, 则当您上传更新 project.yml 时,将检测改动,并更新这些标签.



	3. 工程节点配置:
		samples:
		  folded_projects: []
		  global_labels:
		  - name: pr_samples
			description: 此次提交包含 [案例工程] 相关的改动.
			color: 68E0F8
		  - name: pr_samples1
			description: 此次提交包含 [案例工程2] 相关的改动.
			color: 68E0F9
		  projects:
		  - project_name: Sample1
			project_folder: samples/Sample1
			labels: 
			dependency_config:
			  type: nuget
			  dependency_update_interval: monthly
			  commit_prefix: '[DEPENDENCY SAMPLE]'
			  special_time: 05:00
			  special_time_zone: Asia/Harbin
			  labels:
			  - name: dependencies
				description: 有依赖需要升级
				color: 4E04B0

			samples: scanner 扫描了4个固定的路径:
				samples 案例文件夹下所有工程
				src 源码文件夹下所有工程
				test/ut 单元测试文件夹的第一层目录项目,不会递归所有工程
				test/workflow 管道功能文件夹下所有工程

			folded_projects: 记录了被这折叠的项目,仅享有全局配置, 详细请看 is_folded 的解读.

			global_labels: 全局标签,后跟 label 数组. 意思是在该节点下的所有文件变更所提交的 PR 都会自动打上这些标签.案例中有两个全局标签.

			projects: 工程配置数组.(注意 与 projects 统级别的节点,均为全局配置, 目前仅有 global_labels 和 folded_projects: [])

				project_name: .NET 项目名

				is_ignored: 如果您想忽略此项目,不让其参与到管道的各个功能中,可以设置成 true, scanner 将排除它.

				is_folded: 如果此项目只想享有全局的功能,而没有自己的详细配置,那么可以设置成 true, scanner 将会折叠此项目,并将其放在 folded_projects 数组中.

				trigger_pull_request_test: true 测试工程才有的节点, 是否在提交 PR 时运行该 UT 测试.

				trigger_codecov: true 测试工程才有的节点, 是否在发布时生成覆盖率文件并上传.

				project_folder: 项目所在的相对路径(linux格式)

				labels: 该项目特有的标签数组,也是在变更提交 PR 的时候自动打上标签, 但与其他项目隔离.

				dependency_config: 该工程的依赖检测配置,只写 key 不写值则代表空, 将不启用检测.

					type: 依赖包的类型,.NET 的是 nuget , github 的是 github-actions, 还有 npm/pip/.. 等等.

					interval: 检测周期.

					commit_prefix: PR 提交前缀, 当有依赖需要升级时, 依赖将向库中提交 PR. 

					special_time: 指定在某一时间运行

					special_time_zone: 指定时区

					labels:  当 PR 提交时伴自动打上哪些标签



CHANGELOG 发布管道:

	配置文件: release.yml

	● 任务说明:

		○ 并行任务1: 	归档 VNext 计划到具体的发版计划中。
		○ 并行任务2: 	自动打 Release/Tag 发版标记, 并附带发布信息。
		○ 并行任务3: 
						触发 UT 测试并生成覆盖率文件。
						触发 发布 测试并打包符合条件的包。

		该管道的任务可以重复多次执行,有重复检测, 执行成功标准不在于当前管道的所有任务是否都完成成功。
		多次触发会排队运行, 整个管道不会并发,但其中的任务会并发, 保证多次提交 CHANGELOG 文档的结果最终一致。


	● 原理及流程:

		1. 学习并更改您的 Directory.Build.props , 当前框架的 Directory.Build.props 文件修改将作用于 src/ 文件夹下的所有工程。
		2. 学习并更改您的类库 src/ 文件夹下的工程, 定制化发布包的信息。
		3. 按照案例更改您的 CHANGELOG.md 文件, 上传/更改 CHANGELOG.md 将触发 Github 中的 release 管道, 管道执行 ut/publish 单元测试。
		4. 单元测试将扫描 CHANGELOG.md 文件的最后一节发布信息, 进而进行CHANGELOG 信息提取,本地包与 CHANGELOG 信息匹配, 本地版本与 NUGET 包版本判断。
		5. 如果所有测试通过,将使用命令将打包好的文件上传至 NUGET。
		6. 上传成功后将以 CHANGELOG.md 中的版本为依据,打出 Release 分支。

	注意: 
		CHANGELOG 版本号的控制可以参照 微软在NUGET章节中的相关文档(https://learn.microsoft.com/zh-cn/nuget/create-packages/prerelease-packages#semantic-versioning).


	● 关联 ISSUE: 
		
		自动关联和 PR 标题相似度较高的 ISSUE, pr_recommend.yml 中名为 recommend 的节点配置:

			○ 环境变量 ISSUE_STATUS: 状态过滤，其值含义:

					OPEN 从打开状态的 ISSUE 中挑选最相似的做关联。
					CLOSED 从关闭状态的 ISSUE 中挑选最相似的做关联。
					ALL 从所有状态的 ISSUE 中挑选最相似的做关联，包括打开和关闭。

			○ 环境变量 PICK_COUNT: 从最相似的集合中挑选出几个 ISSUE 与当前 PR 做关联, 默认为 (PICK_COUNT: 2)。

			○ 环境变量 MIN_SIMILAR_SCORE: 最小相似度，默认为 98% (MIN_SIMILAR_SCORE: 0.98)。

			○ 环境变量 MAX_SIMILAR_SCORE: 最大相似度，默认为 100% (MAX_SIMILAR_SCORE: 1)。
				
			○ 环境变量 USE_PADDLE: 是否使用 paddle 模式进行分词，默认为使用 (USE_PADDLE: "TRUE")。



PR 归档管道:

	配置文件: pr_archive.yml

		当 PR 合并成功后触发, 将 PR 自动合并到 Project 中。

		其中 环境变量 PROJECT_NAME 为要归档到的 Project 名称，默认为 "{仓库名字}_VNext"。
		其他 yml 文件中也有该环境变量的配置，如果您想更改，请全部更改。



ISSUE 屏蔽管道:

	配置文件: block_user.yml
		
		当您在 ISSUE 中看见恶意的垃圾问题时，您可以选择为 ISSUE 打上 aaa-block-user 标签，这将触发屏蔽管道运行，拉黑用户，并删除当前 ISSUE.


ISSUE 推荐管道:

	配置文件: issue_recommend.yml

		当用户提交一个 ISSUE 时, ISSUE 推荐管道将被触发，和以往的 ISSUE 进行比对，推荐一定相似度的 ISSUE。

	配置说明:

		  ISSUE_STATUS: 从何种状态的 ISSUE 中挑选相似的 ISSUE，其值含义:

				OPEN: 从打开状态的 ISSUE 中挑选最相似的做关联。
				CLOSED: 从关闭状态的 ISSUE 中挑选最相似的做关联。
				ALL: 从所有状态的 ISSUE 中挑选最相似的做关联，包括打开和关闭。

		  USE_PADDLE: 是否使用 paddle 模式进行分词，默认为使用 (USE_PADDLE: "TRUE")。


类库开发建议:

方案1:

	打出 dev.vnext 分支, 再 dev 基础上打出 bugfix / func / optimic 等分支。
	bugfix / func / optimic 分支上传关键代码,并创建 PR 提交给 dev.vnext 分支。
	最后由 dev.vnext 分支统一合并到 main 中。

方案2:

	更改 pr_archive / pr_test yml 文件中的 branch 节点值: 由 '- dev**' 改为 'main'。
	打出 dev.vnext 分支, 每次提交代码都向 main 分支中提交。

